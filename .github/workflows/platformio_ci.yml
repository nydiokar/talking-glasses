name: PlatformIO CI

on:
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # Allow manual triggers
  schedule:
    - cron: '0 0 * * 0'  # Weekly check on Sundays

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Full git history for proper versioning
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache PlatformIO dependencies
      uses: actions/cache@v3
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-pio-
    
    - name: Install PlatformIO Core
      run: |
        python -m pip install --upgrade pip
        pip install platformio
    
    - name: Check code formatting
      run: |
        pip install cpplint
        cpplint --recursive --filter=-legal/copyright,-build/include_subdir src/
      continue-on-error: true
    
    - name: Dependency vulnerability scan
      run: |
        pip install safety
        safety check
      continue-on-error: true
    
    - name: PlatformIO Audit
      run: pio pkg exec -p pkg-name=platformio/tool-audit -c audit project -e basic_test
    
    - name: Build basic_test environment
      run: pio run -e basic_test
    
    - name: Build i2c_test environment
      run: pio run -e i2c_test
    
    - name: Build status_led_blink environment
      run: pio run -e status_led_blink
    
    - name: Analyze memory usage
      run: |
        echo "Memory usage analysis:"
        for env in basic_test i2c_test status_led_blink; do
          echo "Environment: $env"
          pio run -e $env --target size
        done
    
    - name: Run static code analysis (cppcheck)
      run: |
        pip install cppcheck
        cppcheck --enable=all --suppress=missingIncludeSystem src/ -I include/ --error-exitcode=1
      continue-on-error: true  # Don't fail the build on this step

    # - name: Artifact - Compiled Firmware
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: firmware_binaries
    #     path: .pio/build/**/firmware.bin
    #     retention-days: 7

  autolabel:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/labeler@v4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          configuration-path: .github/labeler.yml 